comp main<G: 1>(
    @interface[G] go: 1,
    @[G, G+1] left: 32,
    @[G, G+1] right: 32,
    @[G+1, G+2] opt: 32,
) -> (@[G+3, G+4] out: 32) {
    // AND block
    A := new And[32];
    a0 := A<G>(left, right);
    and_stage := new Register[32]<G, G+2>(a0.out); // Register AND result
 
    // XOR block
    X := new Xor[32];
    x0 := X<G+1>(and_stage.out, opt);
    xor_stage := new Register[32]<G+1, G+3>(x0.out); // Register XOR result
 
    // Output register to satisfy timing
    r0 := new Register[32]<G+2, G+4>(xor_stage.out);
    out = r0.out;
}


(comp main
  (events
   (event G))
  (ports
   (interface[1] (G) go)  ; G is not phantom in this component because it has an interface
   (in-port[32]  (G       (+ G 1)) left)
   (in-port[32]  (G       (+ G 1)) right)
   (in-port[32]  ((+ G 1) (+ G 2)) opt)
   (out-port[32] ((+ G 2) (+ G 3)) out))
  (instantiate
   (A (new And[32]))
   (X (new Xor[32])))
  (invoke
   (a0 (A (G) left right))
   (x0 (X (+ G 1) a0 opt)))
  (connect (out x0))
; (constraints (> L G)) ; optional constraints over events, if there are multiple events
)

main = Component(
    signature=Signature(
        name='main',
        event='G',
        interface=InterfacePort(
            name='go',
            event='G',
            width=1
        ),
        in_ports= [
            Port(
                name='left', direction='in', range_=('G', 'G+1'), width=32),
            Port(
                name='right', direction='in', range_=('G', 'G+1'), width=32),
            Port(
                name='opt', direction='in', range_=('G+1', 'G+2'), width=32),
        ],
        out_ports= [
            Port(
                name='out', direction='out', range_=('G+2', 'G+3'), width=32),
        ]
    ),
    commands= [
        Instance(
            variable='A', type_name='And', size=32
        ),
        Instance(
            variable='X', type_name='Xor', size=32
        ),
        Invoke(
            variable='a0', function='A', range_='G', ports=['left','right']
        ),
        Invoke(
            variable='x0', function='X', range_='G+1', ports=['a0.out', 'opt']
        ),
        Connect(
            source='x0.out', target='out'
        )
    ]
)